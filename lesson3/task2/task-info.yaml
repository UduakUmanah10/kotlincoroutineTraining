type: edu
files:
  - name: test/my/exercise/Tests.kt
    visible: false
    text: |
      package my.exercise
      
      import org.junit.Rule
      import org.junit.Test
      import org.junit.rules.Timeout
      import java.util.concurrent.TimeUnit
      
      
      class Test {
          @JvmField
          @Rule
          var globalTimeout = Timeout(5, TimeUnit.SECONDS)
      
          @Test
          fun testHello(): Unit =
              TestSyntax().use {
                  it.default()
              }
      }
    learner_created: false
  - name: src/my/exercise/TestSyntax.kt
    visible: false
    text: |-
      package my.exercise
      
      import kotlinx.coroutines.ExperimentalCoroutinesApi
      import kotlinx.coroutines.newSingleThreadContext
      import java.lang.AssertionError
      import java.util.concurrent.atomic.AtomicInteger
      import java.util.concurrent.atomic.AtomicReference
      import kotlin.coroutines.CoroutineContext
      
      class TestSyntax(
          val required: Int? = null
      ) : AutoCloseable {
          private val close = AtomicReference<List<() -> Unit>>(emptyList())
          private val counter = AtomicInteger(0)
      
          fun expect(i: Int): Unit {
              val actual = counter.incrementAndGet()
              require(actual == i) {
                  "Expected to $actual occur, but found $i"
              }
          }
      
          fun never(): Nothing =
              throw AssertionError("This should have never occurred")
      
          @OptIn(ExperimentalCoroutinesApi::class)
          fun newSingleThreadDispatcher(name: String): CoroutineContext =
              newSingleThreadContext(name)
                  .also { dis -> close.updateAndGet { it + dis::close } }
      
          override fun close() {
              close.get()
                  .mapNotNull { runCatching { it() }.exceptionOrNull() }
                  .rethrow()
              required?.let {
                  require(counter.get() == required) {
                      "Should've had $required steps, but only encountered ${counter.get()}"
                  }
              }
          }
      
          fun List<Throwable>.rethrow() {
              fold<Throwable, Throwable?>(null) { acc, it ->
                  acc?.apply { addSuppressed(it) } ?: it
              }?.let { throw it }
          }
      }
    learner_created: false
  - name: src/my/exercise/Task.kt
    visible: true
    placeholders:
      - offset: 234
        length: 1
        placeholder_text: /* Order of occurrence */
        initial_state:
          length: 25
          offset: 234
        initialized_from_dependency: false
        selected: true
        status: Unchecked
        encrypted_possible_answer: 3
      - offset: 323
        length: 1
        placeholder_text: /* Order of occurrence */
        initial_state:
          length: 25
          offset: 347
        initialized_from_dependency: false
        selected: true
        status: Unchecked
        encrypted_possible_answer: 2
      - offset: 406
        length: 1
        placeholder_text: /* Order of occurrence */
        initial_state:
          length: 25
          offset: 454
        initialized_from_dependency: false
        selected: true
        status: Unchecked
        encrypted_possible_answer: 1
      - offset: 427
        length: 9
        placeholder_text: /* Expect or never */
        initial_state:
          length: 21
          offset: 499
        initialized_from_dependency: false
        selected: true
        status: Unchecked
        encrypted_possible_answer: expect(4)
    text: |
      package my.exercise
      
      import kotlinx.coroutines.*
      
      fun TestSyntax.default(): Unit =
          runBlocking(newSingleThreadDispatcher("main")) {
              supervisorScope {
                  launch {
                      delay(2000)
                      expect(/* Order of occurrence */)
                  }
                  launch {
                      delay(1000)
                      expect(/* Order of occurrence */)
                      throw RuntimeException("Boom")
                  }
                  expect(/* Order of occurrence */)
              }
              /* Expect or never */
          }
    learner_created: false
status: Unchecked
record: -1
